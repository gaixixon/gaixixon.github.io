import ast
import re
from html import unescape
from http.cookies import SimpleCookie
from time import sleep

import requests
from bs4 import BeautifulSoup

BASE_URL = "https://thetvapp.to"
PAYLOAD = None


def evaluate(a, o, b):
    if o == "-":
        return int(a) - int(b)
    if o == "+":
        return int(a) + int(b)
    if o == "*":
        return int(a) * int(b)
    return int(a) // int(b)


def get_key_values(page_soup):
    app_js = page_soup.find_all('script', src=True)
    app_js = [
        source['src'] for source in app_js
        if source['src'].endswith('.js') and 'app' in source['src'].split("/")[-1]
    ][0]

    app_js = requests.get(app_js).content.decode()
    fixed_js_key = re.findall(
        r'headers:{[^{}]*"X-CSRF-TOKEN"[^{}]*},body:[^{}]*{([^{}]*)}',
        app_js
    )[0].split(":")[0]

    all_operations = re.findall(
        r'const\s[^=\s]+=\[];([^;]+);',
        app_js
    )
    possible_key_values = []

    for list_operations in all_operations:
        if "{" in list_operations or "}" in list_operations:
            continue
        if '](' not in list_operations or '),' not in list_operations:
            continue

        function_name = list_operations.split("[")[1].split("(")[0]
        function_name = re.findall(
            fr'const\s{function_name}=([^;]+);',
            app_js
        )[0]

        offset_operation = re.findall(
            r"function {function_name}\(.*?\){(.*?)}".replace("{function_name}", function_name),
            app_js,
            re.DOTALL
        )[0]

        function_name = re.findall(
            r'const\s[^=]+=([^()]+)\(',
            offset_operation
        )[0]

        offset_operation = re.findall(
            r"(\w+)=\1([-+*/])(\d+),",
            offset_operation
        )[0]

        list_operations = list_operations.split(",")
        list_operations = [
            re.findall(r'\(([^()]+)\)', op)[-1].replace('"', "").replace("'", "")
            for op in list_operations
        ]

        fixed_js_words = re.findall(
            r"function {function_name}\(.*?\){.*?(\[.*?\]);return\s.*?}".replace(
                "{function_name}",
                function_name
            ),
            app_js,
            re.DOTALL
        )[0]
        try:
            fixed_js_words = ast.literal_eval(fixed_js_words)
        except:
            continue

        try:
            max_op_len = len(max(list(filter(lambda o: not o.isdigit(), list_operations)), key=len))
        except:
            max_op_len = None

        for _ in range(0, len(fixed_js_words) - 1):
            current_key_value = []
            fail_key_value = False

            for operation in list_operations:
                if operation.isdigit():
                    operation = evaluate(operation, offset_operation[1], offset_operation[2])
                    operation = fixed_js_words[operation]

                if not bool(re.match(r'^[a-zA-Z]+$', operation)):
                    fail_key_value = True
                    break
                elif max_op_len is not None and len(operation) > 2 * max_op_len:
                    fail_key_value = True
                    break
                elif len("".join(current_key_value)) > 2 * len(fixed_js_key):
                    fail_key_value = True
                    break
                current_key_value.append(operation)

            if len(current_key_value) == 0:
                fail_key_value = True
            elif len("".join(current_key_value)) < len(fixed_js_key):
                fail_key_value = True
            elif len(min(current_key_value, key=len)) * 2 < len(max(current_key_value, key=len)):
                fail_key_value = True

            if not fail_key_value:
                current_key_value = "".join(current_key_value)
                possible_key_values.append(current_key_value)

            fixed_js_words.append(fixed_js_words.pop(0))

    return {
        "key": fixed_js_key,
        "value": possible_key_values
    }


def get_m3u8(source_url):
    global PAYLOAD
    response = requests.get(source_url)
    soup = BeautifulSoup(response.text, 'html.parser')

    csrf_token = soup.find_all('meta', attrs={'name': 'csrf-token'})[0]["content"]
    get_m3u8_endpoint = soup.find_all("div", attrs={"id": "get-m3u8-link"})[0]["data"]
    if not get_m3u8_endpoint.startswith(BASE_URL):
        get_m3u8_endpoint = f'{BASE_URL}{get_m3u8_endpoint}'

    response = dict(response.headers)
    cookies = SimpleCookie()
    cookies.load(response["set-cookie"])
    app_session = {k: v.value for k, v in cookies.items()}["thetvapp_session"]

    payload = PAYLOAD
    if payload is None:
        payload = get_key_values(soup)

    for key_value in payload["value"]:
        js_key = payload["key"]
        response = requests.post(
            get_m3u8_endpoint,
            cookies={'thetvapp_session': app_session},
            headers={'X-CSRF-TOKEN': csrf_token},
            json={js_key: key_value}
        )

        if response.status_code == 200:
            PAYLOAD = {
                "key": js_key,
                "value": [key_value]
            }
            return response.json()
        sleep(0.5)

    print("Failed to obtain the m3u8 with any payload... Debug the script")
    exit(0)


if __name__ == '__main__':
    r = requests.get(BASE_URL)
    s = BeautifulSoup(r.text, 'html.parser')

    links = s.find_all('a', class_='list-group-item')
    index = 0
    for link in links:
        href = link.get('href')
        if not href or not href.startswith('/tv/'):
            continue

        href = f"{BASE_URL}{href}"
        text = unescape(link.text)
        index += 1

        try:
            print(index, text, get_m3u8(href))
        except:
            print(index, "possible vpn issues: ", href)
